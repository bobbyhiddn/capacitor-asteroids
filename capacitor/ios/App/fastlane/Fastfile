default_platform(:ios)

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :closed_beta do
    setup_ci if ENV['CI']

    # Configure App Store Connect API
    app_store_connect_api_key(
      key_id: ENV["APPLE_KEY_ID"],
      issuer_id: ENV["APPLE_ISSUER_ID"],
      key_content: "-----BEGIN PRIVATE KEY-----\n#{ENV['APPLE_KEY_CONTENT']}\n-----END PRIVATE KEY-----",
      in_house: false,
      is_key_content_base64: false
    )

    # Get current version from Xcode project
    current_version = get_version_number(
      xcodeproj: "App.xcodeproj",
      target: "App"
    )

    # Ensure we have a valid version number
    if current_version.nil? || current_version.empty? || !current_version.match(/^\d+\.\d+\.\d+$/)
      # Set a default version if invalid
      current_version = "1.0.0"
      increment_version_number(
        version_number: current_version,
        xcodeproj: "App.xcodeproj"
      )
    end

    # Handle version number
    if ENV["CUSTOM_VERSION"].to_s.empty?
      # Split current version into components
      major, minor, patch = current_version.split('.').map(&:to_i)
      
      # Calculate new version
      new_version = case ENV["VERSION_TYPE"]
      when "major"
        "#{major + 1}.0.0"
      when "minor"
        "#{major}.#{minor + 1}.0"
      else # patch or default
        "#{major}.#{minor}.#{patch + 1}"
      end

      # Set new version
      increment_version_number(
        version_number: new_version,
        xcodeproj: "App.xcodeproj"
      )
    else
      # Validate custom version format
      unless ENV["CUSTOM_VERSION"].match(/^\d+\.\d+\.\d+$/)
        UI.user_error!("Custom version must be in format X.Y.Z (e.g., 1.0.0)")
      end
      
      # Use custom version if provided
      increment_version_number(
        version_number: ENV["CUSTOM_VERSION"],
        xcodeproj: "App.xcodeproj"
      )
    end
    
    # Auto-increment build number
    current_build_number = latest_testflight_build_number(
      api_key: lane_context[SharedValues::APP_STORE_CONNECT_API_KEY],
      app_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
      team_id: ENV["APP_STORE_CONNECT_TEAM_ID"]
    ) rescue 0
    
    increment_build_number(
      build_number: current_build_number + 1,
      xcodeproj: "App.xcodeproj"
    )

    # Extract git authorization token from MATCH_GIT_URL
    git_url = ENV["MATCH_GIT_URL"]

    # Sync certificates and profiles
    sync_code_signing(
      type: "appstore",
      app_identifier: ENV["DEVELOPER_APP_IDENTIFIER"],
      git_url: git_url,
      readonly: true,
      keychain_name: "build.keychain",
      keychain_password: ENV["TEMP_KEYCHAIN_PASSWORD"]
    )

    # Update code signing in project
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "App.xcodeproj",
      team_id: ENV["DEVELOPER_PORTAL_TEAM_ID"],
      code_sign_identity: "iPhone Distribution",
      profile_name: "match AppStore #{ENV['DEVELOPER_APP_IDENTIFIER']}",
      bundle_identifier: ENV["DEVELOPER_APP_IDENTIFIER"]
    )

    # Build the app
    build_ios_app(
      scheme: "App",
      workspace: "App.xcworkspace",
      export_method: "app-store",
      export_options: {
        provisioningProfiles: { 
          ENV["DEVELOPER_APP_IDENTIFIER"] => "match AppStore #{ENV['DEVELOPER_APP_IDENTIFIER']}"
        }
      }
    )

    # Upload to TestFlight with processing wait
    upload_to_testflight(
      skip_waiting_for_build_processing: false,
      wait_processing_interval: 30
    )
  end
end